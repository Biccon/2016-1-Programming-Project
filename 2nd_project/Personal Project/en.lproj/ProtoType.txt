// 문자 관련 함수
int get_first_char(char *word);
- word에서 첫번째 char를 반환
int get_index(char *word);
- word에서 첫번째 char을 index로 반환
char * string_to_lower(char *word);
- word전체를 소문자로 변경 후 반환

// 노드 추가 함수
Node * add_after(Node *node, char *data);
- 해당 node뒤에 data를 가지는 노드를 Dynamic하게 추가
Node * add_before(Node *node, char *data);
- 해당 node앞에 data를 가지는 노드를 Dynamic하게 추가
Node * add_first(LinkedList *list, char *data);
- 입력받은 list의 맨 앞에 data를 가지는 노드를 Dynamic하게 추가
Node * add_last(LinkedList *list, char *data);
- 입력받은 list의 맨 뒤에 data를 가지는 노드를 Dynamic하게 추가

// 노드 얻는 함수
Node * get_first(LinkedList *list);
- 입력받은 list의 맨 앞에 있는 노드를 반환
Node * get_last(LinkedList *list);
- 입력받은 list의 맨 뒤에 있는 노드를 반환
Node * get_node_by_data(LinkedList *lists, char *data);
- 입력받은 lists들 중에서 data에 해당하는 리스트 가운데 data를 가지는 노드를 검색해서 반환

// 노드 지우는 함수(LinkedList에서 링크 삭제)
void remove_node(Node *node);
- 입력받은 node를 삭제하고, 해당 노드의 앞의 노드와 뒤에 있는 노드를 Link 해줌

// 리스트 관련 함수
int get_size(LinkedList *list);
- 입력받은 list에 존재하는 노드들의 개수 반환
void init_list(LinkedList *lists);
- 입력받은 lists들의 공간과 그 list의 header와 trailer 또한 Dynamic하게 공간을 할당하고 서로 Link 해줌
void set_list(LinkedList *lists);
- voc_sample.txt로부터 단어들을 읽어와서 입력받은 lists들 중 해당 list에 Dynamic하게 추가
- The others 리스트를 제외한 모든 리스트들은 단어를 최대 5개 가질 수 있고, 5개가 넘은 단어들은 The others 리스트에 추가
void print_list(LinkedList *list);
- 입력받은 list에 존재하는 노드들을 출력해줌
void print_lists(LinkedList *lists);
- 입력받은 lists들에 존재하는 노드들을 모두 출력해줌

// 사용자 입력 함수
void insert_node(LinkedList lists, char *data);
- 입력받은 lists들 중에서 해당 data가 들어갈 list에 추가 시켜주고 개수가 6개면 The others로 옮김
- 최종적으로 추가되거나 옮겨진 노드의 Offset 출력
- INSERT: row index @ count(added list)
void delete_node(LinkedList lists, char *data);
- 입력받은 lists들 중에서 해당 data가 들어간 노드를 찾아서 해당 노드의 Offset 출력 후 remove_node 시켜줌
- DELETE: row index @ count(deleted list)
void search_node(LinkedList lists, char *data);
- 입력받은 lists들 중에서 해당 data가 들어간 노드를 찾아서 해당 노드의 Offset 출력
- SEARCH: row index




























